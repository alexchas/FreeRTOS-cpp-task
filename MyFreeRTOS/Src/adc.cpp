/*******************************************************************************
*  FILENAME: adc.cpp
*
*  DESCRIPTION: функции для работы с аналогово-цифровым преобразователем
*
*  Created on: 21 мая 2018 г.
*  Author: Alexander Chashkin
******************************************************************************/

#include <stm32f4xx_hal.h>
#include <stm32f4xx_hal_adc.h>
#include <stm32f407xx.h>
#include "adc.h"
#include "assert.h"
#include "macros.h"

/***************************************************************************************************************
*  constructor: инициализиурет канал DMA адресом в RAM, куда складывать данные измерений и количеством измерений
****************************************************************************************************************/
cAdc::cAdc(const tU32 memoryBaseAddr, const tU8 measureCount) {
  ASSERT(measureCount != 0);
}

/***************************************************************************************************************
*  Включает АЦП
****************************************************************************************************************/
tBoolean cAdc::switchOn(void) const {
  tBoolean  result = FALSE;
  SETBIT(ADC1->CR2, ADC_CR2_ADON);    //Включаем АЦП
  result =  tBoolean(CHECK_BIT_SET(ADC1->SR, ADC_SR_STRT_Msk));
  return result;
}

/***************************************************************************************************************
* Запуск преобразования
****************************************************************************************************************/
tBoolean cAdc::startConversion(void) const {
  tBoolean  result = FALSE;
  SETBIT(ADC1->CR2, ADC_CR2_SWSTART);  // Запускаем преобразование АЦП
  result = tBoolean(CHECK_BIT_SET(ADC1->SR, ADC_SR_STRT));
  return result;
}

/***************************************************************************************************************
* считывание результата преобразования
****************************************************************************************************************/
tF32 cAdc::getValue(void) const {
  tF32  result = (tF32) ADC1->DR;
  return result;
}

/***************************************************************************************************************
* проверка, готово ли преобразование
****************************************************************************************************************/
tBoolean cAdc::isConversionReady(void) const {
  tBoolean result = tBoolean(CHECK_BIT_SET(ADC1->SR, ADC_SR_EOC));
  return result;
}






